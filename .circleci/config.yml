version: 2
jobs:
  build:
    working_directory: ~/printspeak/printspeak
    docker:
      - image: printspeak/circle
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu

      - image: circleci/postgres:9.6.3-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_ruby_test
      
      - image: redis

    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      DATABASE_URL: postgres://ubuntu:@127.0.0.1:5432/circle_ruby_test
      CODECLIMATE_REPO_TOKEN: 7fa3492e65040bd42e0bf66ef86d6aea90eeda4f65e0e77c83abd0447177d27e
      CC_TEST_REPORTER_ID: 7fa3492e65040bd42e0bf66ef86d6aea90eeda4f65e0e77c83abd0447177d27e
    
    steps:
      - checkout

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      - save_cache:
          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: createdb -U postgres -h localhost -p 5432 external_database

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      # Run rspec in parallel
      - run:
          name: Run test
          command: |
            bundle exec rake test

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
